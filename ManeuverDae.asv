%---------------------------------------
% Begin: function ManeuverDae.m
%---------------------------------------

function dae = ManeuverDae(solution)

    global CONSTANTS
    
    g   = CONSTANTS.g;
    m   = CONSTANTS.m;
    Iz = CONSTANTS.Iz;
    l_F = CONSTANTS.l_F;
    l_R = CONSTANTS.l_R;
    mu  = CONSTANTS.mu;
    C   = CONSTANTS.C;
    B   = CONSTANTS.B;
    f_Fz = CONSTANTS.f_Fz;
    f_Rz = CONSTANTS.f_Rz;
    
    t = solution.time;
    X = solution.state;
    u = solution.control;
    p = solution.parameter;

    len = size(t,1);


    % There are 4 states for case 1
    % u = xx(:,1);
    % v = xx(:,2);
    % r = xx(:,3);
    % psi = xx(:,4);
    % x = xx(:,5);
    % y = xx(:,6);

    % Dynamic equation for case 1
    % udot = v.*r;
    % vdot = -u.*r;
    % rdot = g.*uc;
    % psidot = r;
    % xdot = u.*cos(psi) - v.*sin(psi);
    % ydot = u.*sin(psi) + v.*cos(psi);

    
    Vx  = X(:,1);
    Vy  = X(:,2);
    r   = X(:,3);
    psi = X(:,4);
    xi  = X(:,5);
    yi  = X(:,6);

     
    f_Fx  = u(:,1);
    f_Rx  = u(:,2);
    delta = u(:,3);
    
    % f_Fy = 0;
    % f_Ry = 0;
   
    
 
    Vxw = cos(delta).*Vx + sin(delta).*Vy;
    Vyw = -sin(delta).*Vx + cos(delta).*Vy;
    
    %f_Fx = f_Fx.*sign(Vxw);
    %f_Rx = sign(Vx).*f_Rx;
    
    %k = 1;
    
    
   	%while (k <=len)  
    %    if ( f_Fx(k,1) > 0)
            %f_Fx(k,1) = 0;
            if isa(f_Fx,'ad')
                temp_value = f_Fx.value;
                temp_value( find(temp_value > 0) ) = 0;
                
                f_Fx = ad(temp_value);
            else
                f_Fx(find(f_Fx > 0)) = 0;
            end
            
            
    %    elseif (f_Fx(k,1) < -mu*f_Fz)
            %f_Fx(k,1) = -mu*f_Fz;
            
            if isa(f_Fx,'ad')
                temp_value = f_Fx.value;
                temp_value( find(temp_value < -mu*f_Fz) ) = -mu*f_Fz;
                
                f_Fx = ad(temp_value) ;
            else
                f_Fx( find(f_Fx < -mu*f_Fz) ) = -mu*f_Fz;
            end
            
            
            %if (~isempty(index))
            %    f_Fx(index) = -mu*f_Fz;
            %end
        %end
        
        f_Fx = f_Fx.*sign(Vxw);

        %if ( f_Rx(k,1) > mu*f_Rz)
        %    f_Rx(k,1) =  mu*f_Rz;
        
            if isa(f_Rx,'ad')
                
                temp_value = f_Rx.value;
                temp_value ( find ( temp_value > mu*f_Rz ))= mu*f_Rz;
                f_Rx = ad(temp_value );
                %f_Rx.value( find(f_Rx.value > mu*f_Rz) ) = mu*f_Rz;
            else
                f_Rx( find(f_Rx > mu*f_Rz) ) = mu*f_Rz;
            end
            
            %index = find(f_Rx > mu*f_Rz);
            
            %if (~isempty(index))
            %    f_Rx(index) = mu*f_Rz;
            %end
        %elseif (f_Rx(k,1) < -mu*f_Rz)
            %f_Rx(k,1) = -mu*f_Rz;
            
            if isa(f_Rx,'ad')
                temp_value = f_Rx.value;
                
               temp_value( find(temp_value < -mu*f_Rz) ) = -mu*f_Rz;
               
               f_Rx = ad(temp_value);
                %
                % f_Rx.value( find(f_Rx.value < -mu*f_Rz) ) = -mu*f_Rz;
            else
                f_Rx( find(f_Rx < -mu*f_Rz) ) = -mu*f_Rz;
            end
            
            %index = find(f_Rx < -mu*f_Rz);
            %if (~isempty(index))
            %    f_Rx(index) = -mu*f_Rz;
            %end
        %end
    
        %if (f_Rx(k,1) < 0)   % braking request
            %f_Rx(k,1) = sign(Vx(k,1)).*f_Rx(k,1);
            if isa(f_Rx,'ad')
                temp_value = f_Rx.value;
                index = find( temp_value < 0);
                
                temp_Vx_value = Vx.value;
                temp_value = sign(temp_Vx_value(index)).*temp_value(index);
                
                f_Rx = ad (temp_value);
                
                % f_Rx.value ( index ) = sign(Vx.value(index)).*f_Rx.value(index);
            else
                index = find( f_Rx < 0);
                f_Rx ( index ) = sign(Vx(index)).*f_Rx(index);
            end
            
            %index = find( f_Rx < 0);
            %if (~isempty(index))
            %    f_Rx ( index ) = sign(Vx(index)).*f_Rx(index);
            %end
        %end
        
        %if ( delta(k,1) > 45*pi/180)
            %delta(k,1) = 45*pi/180;
            
            if isa(delta,'ad')
                delta.value( find( delta.value > 45*pi/180) ) = 45*pi/180;
            else
                delta( find( delta > 45*pi/180) ) = 45*pi/180;
            end
                
                
            % index = find( delta > 45*pi/180);
            % if (~isempty(index))
            %    delta(index) = 45*pi/180;
            % end
        %elseif (delta(k,1) < -45*pi/180)
            % delta(k,1) = -45*pi/180;
            
            if isa(delta,'ad')
                delta.value( find( delta.value < -45*pi/180) ) = -45*pi/180;
            else
                 delta( find( delta < -45*pi/180) ) = -45*pi/180;
            end
            
            % index = find( delta < -45*pi/180);
            
            % if (~isempty(index))
            %    delta( index ) = -45*pi/180;
            % end
        %end
        %k = k+1;
    %end
    
    
    %Auxiliar variables
    V = sqrt(Vx.^2+Vy.^2);
    beta = atan2(Vy,Vx);




    f_Fy_max = sqrt( (mu*f_Fz).^2 - f_Fx.^2 );
    s_Fy = (V.*sin(beta-delta)+r*l_F.*cos(delta))./(V.*cos(beta-delta)+r*l_F.*sin(delta));
    
    k = 1;

   	
    %while (k <=len)  
    %    if (V(k,1) < 0.8)
            if isa(delta,'ad')
                s_Fy.value( find(V.value < 0.8)) = 0;
            else
                s_Fy( find(V < 0.8)) = 0;
            end
            
            % index = find(V < 0.8);
            % if (~isempty(index))
                
            %    s_Fy(index) = 0;
            % end
    %    end
    %    k = k+1;
    %end
    
    f_Fy = -f_Fy_max.*sin(C*atan(B*s_Fy));


    f_Ry_max = sqrt( (mu*f_Rz).^2 - f_Rx.^2 );
    s_Ry =(V.*sin(beta)-r*l_R)./(V.*cos(beta));
    
   % k = 1;
   %	while (k <=len)    
   %     if (V(k,1) < 0.8)
        %   index = find (V < 0.8); 
        if isa(delta,'ad')
            s_Ry.value( find (V.value < 0.8) ) = 0
        else
            s_Ry( find (V < 0.8) ) = 0;
        end
        
        % if (~isempty(index))
        %    s_Ry(index) = 0;
        % end
            
   %     
   %     end
   %     k = k+1;
   % end
    
    f_Ry = -f_Ry_max.*sin(C*atan(B*s_Ry));

    % f_Fy = zeros(len,1);
    % f_Ry = zeros(len,1);
    
    %{
    for k = 1:len
        Xt = X(k,:);
        ut = u(k,:);
        
        st = ComputeLateralSlips(Xt,ut);
        [f_Fyt, f_Ryt] = ComputeForces(Xt,ut,st);
        
        f_Fy(k,1) = f_Fyt;
        f_Ry(k,1) = f_Ryt;
    end
    f_Fy
    f_Ry
    %}
    
    dVx = 1/m.*(f_Fx.*cos(delta) - f_Fy.*sin(delta) + f_Rx) + Vy.*r;
    dVy = 1/m.*(f_Fx.*sin(delta) + f_Fy.*cos(delta) + f_Ry) - Vx.*r;
    dr = 1/Iz.*((f_Fy.*cos(delta) + f_Fx.*sin(delta)).*l_F - f_Ry.*l_R);
    dpsi = r;
    dxi = cos(psi).*Vx - sin(psi).*Vy;
    dyi = sin(psi).*Vx + cos(psi).*Vy;
    
    dXt = [dVx dVy dr dpsi dxi dyi];

    
    dae = dXt;

    

end

%------------------------------------
% END: function ManeuverDae.m
%------------------------------------